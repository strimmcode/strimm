package uk.co.strimm.services

import com.opencsv.CSVReader
import net.imagej.ImageJService
import net.imagej.overlay.Overlay
import net.imagej.overlay.RectangleOverlay
import org.scijava.plugin.Plugin
import org.scijava.service.AbstractService
import org.scijava.service.Service
import uk.co.strimm.ComponentTexts
import uk.co.strimm.TraceData
import uk.co.strimm.TraceDataWithFrameNumbers
import uk.co.strimm.common.TraceDataFileFormat
import uk.co.strimm.gui.CameraWindowPlugin
import uk.co.strimm.gui.GUIMain
import uk.co.strimm.gui.MetaDataWindowPlugin
import uk.co.strimm.gui.TraceWindowPlugin
import java.io.BufferedReader
import java.io.File
import java.io.FileReader
import java.util.logging.Level

@Plugin(type = Service::class)
class ImportService : AbstractService(), ImageJService {
    /**
     * From a specified metadata file, read trace data and pass it to a newly created MetaDataWindow dockable window
     * plugin
     * @param metaDataFile The specified metadata file
     */
    fun importCameraMetadata(metaDataFile : File){
        GUIMain.loggerService.log(Level.INFO,"Loading camera metadata from file")
        val sanitisedPluginName = GUIMain.utilsService.sanitiseNameForPlugin(metaDataFile.name.split(".").first())
        val newMetaDataWindowPlugin = GUIMain.dockableWindowPluginService.createPlugin(MetaDataWindowPlugin::class.java,
                null,
                true,
                "$sanitisedPluginName${ComponentTexts.MetaDataWindow.PLUGIN_TITLE_SUFFIX}")

        newMetaDataWindowPlugin.dock(GUIMain.strimmUIService.dockableControl,GUIMain.strimmUIService.strimmFrame)
    }

    /**
     * From a specified trace data file, read the trace data and create a new TraceWindow dockable window plugin
     * @param traceDataFile The specified physical trace data file
     */
    fun importTraceData(traceDataFile : File){
        GUIMain.loggerService.log(Level.INFO,"Loading trace data from file")
        val traceData = readTraceData(traceDataFile)

        val sanitisedPluginName = GUIMain.utilsService.sanitiseNameForPlugin(traceDataFile.name.split(".").first())
        val newTraceWindowPlugin = GUIMain.dockableWindowPluginService.createPlugin(TraceWindowPlugin::class.java,
                traceData,
                true,
                "$sanitisedPluginName${ComponentTexts.TraceWindow.PLUGIN_TITLE_SUFFIX}")
        newTraceWindowPlugin.dock(GUIMain.strimmUIService.dockableControl,GUIMain.strimmUIService.strimmFrame)
    }

    /**
     * From a specified tif file, load it in and create it as a dataset. Then create a new camera window plugin and
     * give the new dataset to the new camera window plugin
     * @param tifFile The specified physical tif file
     */
    fun importTif(tifFile : File) : CameraWindowPlugin{
        GUIMain.loggerService.log(Level.INFO,"Loading tif from file")

        //Create the dataset now, so it can be passed to the camera window plugin upon creation
        val dataset = GUIMain.datasetIOService.open(tifFile.path)

        val sanitisedPluginName = GUIMain.utilsService.sanitiseNameForPlugin(tifFile.name.split(".").first())
        val newCameraWindowPlugin = GUIMain.dockableWindowPluginService.createPlugin(CameraWindowPlugin::class.java,
                dataset,
                true,
                "$sanitisedPluginName${ComponentTexts.CameraWindow.PLUGIN_TITLE_SUFFIX}")
        newCameraWindowPlugin.dock(GUIMain.strimmUIService.dockableControl,GUIMain.strimmUIService.strimmFrame)

        //Once the camera window plugin has been created and docked, initialise the display
        newCameraWindowPlugin.cameraWindowController.initialiseDisplay()

//        newCameraWindowPlugin.cameraWindowController.addSliderListener()
        return newCameraWindowPlugin
    }

    /**
     * From a specified trace data file, read this in and populate the necessary data classes. Then create a new
     * trace window plugin and send the loaded trace data to this new trace window plugin
     * @param traceDataFile The specified trace data file that was generated by STR√èMM
     * @return A nested list of all ROI data
     */
    private fun readTraceData(traceDataFile : File) : TraceDataWithFrameNumbers {
        val traceData = ArrayList<ArrayList<TraceData>>()
        val frameNumbers = arrayListOf<Int>()
        val fileFormat = TraceDataFileFormat()

        try{
            val fileReader = BufferedReader(FileReader(traceDataFile))
            val csvReader = CSVReader(fileReader)

            //Get rid of the first line - column headers
            csvReader.readNext()

            var csvRow = csvReader.readNext()
            val numTraces = csvRow.size/fileFormat.totalColsPerTrace

            //Add some dummy ROIs for the data, these are used by the trace window to distinguish different traces
            for(i in 0 until numTraces){
                traceData.add(arrayListOf())
            }
            val dummyROIs = createDummyOverlays(numTraces)

            while(csvRow != null){
                for(i in 0 until numTraces){
                    val elapsedTimeIdx = fileFormat.elapsedTimeColIndex+(i*fileFormat.totalColsPerTrace)
                    val roiValueIdx = fileFormat.roiValueColIndex+(i*fileFormat.totalColsPerTrace)
                    val elapsedTime = csvRow[elapsedTimeIdx].toDouble()
                    val roiValue = csvRow[roiValueIdx].toDouble()
                    frameNumbers.add(csvRow[fileFormat.frameNumberColIndex].toInt())
                    traceData[i].add(TraceData(Pair(dummyROIs[i],roiValue),elapsedTime))
                }

                csvRow = csvReader.readNext()
            }
        }
        catch(ex : Exception){
            GUIMain.loggerService.log(Level.SEVERE, "Error loading trace data csv file. Message: ${ex.message}")
            GUIMain.loggerService.log(Level.SEVERE, ex.stackTrace)
        }

        //TODO distinct on the frame numbers assumes the traces have all come from the same camera feed or camera feeds with the same frame rate
        //Will need to find a way to linking each trace to the relevant camera feed
        return TraceDataWithFrameNumbers(Pair(frameNumbers.toList().distinct(),traceData.toList()))
    }

    /**
     * For the number of traces that are to be loaded, create a dummy overlay
     * @param numTraces The number of traces to be loaded
     * @return an arrayList of the dummy overlays
     */
    private fun createDummyOverlays(numTraces : Int) : ArrayList<Overlay>{
        val dummyROIList = arrayListOf<Overlay>()
        for(i in 0 until numTraces){
            val dummyOverlay = RectangleOverlay()
            dummyOverlay.name = "dummyOverlay$i"
            dummyROIList.add(dummyOverlay)
        }
        return dummyROIList
    }


}