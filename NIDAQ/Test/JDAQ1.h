/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class JDAQ */

/*
int InitProtocol(string csvProt, string szFolder, bool bCompound, bool bRepeat, int deviceID, double minV, double maxV);
int SetStartTrigger(bool bStartTrigger, uInt32 pFIx);
int SetTimingMethod(int timingMethod);
//0 - consecutive, 1 - softwareTiming, 2 - external trigger, 3 - arduino trigger

int RunNext(double*, uInt32*); //runs the next step in the protocol (called by aquisitionmethod)
//akkastream can do a single run
//or it can be a repeat
int UpdateDOChannel(uInt32* pData, int line);
int UpdateAOChannel(double* pData, int channel);
int ShutdownProtocol();
*/


#ifndef _Included_JDAQ1
#define _Included_JDAQ1
#ifdef __cplusplus
extern "C" {
#endif

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_InitProtocol
	(JNIEnv*, jobject, jstring csvProt, jstring szFolder, jboolean bCompound, jboolean bRepeat, jint deviceID, jdouble minV, jdouble maxV);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_SetStartTrigger
	(JNIEnv*, jobject, jboolean bStartTrigger, jint pFIx);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_SetTimingMethod
	(JNIEnv*, jobject, jint timingMethod);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_RunNext
	(JNIEnv*, jobject, jdoubleArray pAIData, jintArray pDIData);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_RunNext1 //cant overload in C
	(JNIEnv*, jobject, jdoubleArray pAOData, jdoubleArray pAIData, jintArray pDOData, jintArray pDIData);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_UpdateDOChannel
	(JNIEnv*, jobject, jintArray pDOData, jint line);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_UpdateAOChannel
	(JNIEnv*, jobject, jdoubleArray pAOData, jint channel);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_ShutdownProtocol
	(JNIEnv*, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNextNumSamples(JNIEnv*, jobject);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNumberOfDataPoints(JNIEnv*, jobject);
	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunStartTime(JNIEnv*, jobject);
	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunEndTime(JNIEnv*, jobject);
	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunSampleTime(JNIEnv*, jobject);
	JNIEXPORT jlong JNICALL Java_uk_co_strimm_services_JDAQ_GetNumberOfStages(JNIEnv*, jobject);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNumChannels(JNIEnv*, jobject, jint type);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetChannelFromIndex(JNIEnv*, jobject, jint type, jint ix);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetPort(JNIEnv*, jobject, jboolean bIn);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetDeviceID(JNIEnv*, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_ResetDevice(JNIEnv*, jobject);

	JNIEXPORT jboolean JNICALL Java_uk_co_strimm_services_JDAQ_GetKeyState(JNIEnv*, jobject, int VK);
	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentSystemTime(JNIEnv*, jobject);


#ifdef __cplusplus
}
#endif
#endif

