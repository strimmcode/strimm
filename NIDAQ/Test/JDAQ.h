/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class JDAQ */
/*
* 
@file JDAQ.h
@author Terry Wright
@email tw567@cam.ac.uk


These functions map to the JDAQ Java class in STRIMM
Java_uk_co_strimm_services_JDAQ_GetCameraMapStatus

will map to:

Java.uk.co.strimm.services.JDAQ.GetCameraMapStatus(...)

*/


#ifndef _Included_JDAQ
#define _Included_JDAQ
#ifdef __cplusplus
extern "C" {
#endif

	//
	// NIDAQ source
	//

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceInit
	(JNIEnv* env, jobject, jstring szCsv, jboolean bCompound, jboolean bRepeat, jint deviceID, jstring deviceName, jdouble minV, jdouble maxV);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceSetStartTrigger
	(JNIEnv*, jobject, jint deviceID, jboolean bStartTrigger, jint pFIx, jboolean bRisingEdge, jdouble timeoutSec);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceSetTimingMethod
	(JNIEnv*, jobject, jint deviceID, jint timingMethod);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceRun
	(JNIEnv* env, jobject, jint deviceID, jdoubleArray pTimes, jdoubleArray pAOData, jdoubleArray pAIData, jintArray pDOData, jintArray pDIData);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceShutdown
	(JNIEnv*, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetNumAOChannels
	(JNIEnv* env, jobject, jint);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetNumDOChannels
	(JNIEnv* env, jobject, jint);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetNumAIChannels
	(JNIEnv* env, jobject, jint);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetNumDIChannels
	(JNIEnv* env, jobject, jint);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetNumSamples
	(JNIEnv* env, jobject, jint);

	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetSampleFreq
	(JNIEnv* env, jobject, jint);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetChannelFromIndex
	(JNIEnv* env, jobject, jint deviceID, jint type, jint index);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetDIPort
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQSourceGetDOPort
	(JNIEnv* env, jobject, jint deviceID);

	//
	//NIDAQ Continuous Source
	//
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceInit
	(JNIEnv* env, jobject, jint deviceID, jstring szCsv, jboolean bStartTrigger, jboolean bRisingEdge, jint pFIx, jdouble timeoutSec, jdouble minV, jdouble maxV);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceRun
	(JNIEnv* env, jobject, jint deviceID, jdoubleArray pTimes, jdoubleArray pAOData, jdoubleArray pAIData, jintArray pDOData, jintArray pDIData);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceShutdown
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetNumSamples
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetSampleFreq
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetNumAOChannels
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetNumAIChannels
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetNumDOChannels
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetNumDIChannels
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetChannelFromIndex
	(JNIEnv* env, jobject, jint deviceID, jint type, jint index);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetDIPort
	(JNIEnv* env, jobject, jint deviceID);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQContinuousSourceGetDOPort
	(JNIEnv* env, jobject, jint deviceID);

	//
	//NIDAQ Data Sink
	//


	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQDataSinkInit
	(JNIEnv* env, jobject, jint deviceID, jdouble minV, jdouble maxV);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQDataSinkRun
	(JNIEnv* env, jobject, jint deviceID, jdoubleArray pAOData, jintArray pDOData, jint numSamples, jdouble sampleFreq, jint numAOChannels, jintArray AOChannels, jint numDOChannels, jintArray DOChannels, jint DOport);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_NIDAQDataSinkShutdown
	(JNIEnv* env, jobject, jint deviceID);







	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_TestStart
	(JNIEnv* env, jobject);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_TestStop
	(JNIEnv* env, jobject);
	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_PreTestStart
	(JNIEnv* env, jobject obj);


	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_Test
	(JNIEnv* env, jobject);
	//Camera Image File Map

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetCameraMapStatus
	(JNIEnv* env, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_RegisterCameraForCameraMap
	(JNIEnv* env, jobject, jstring cameraSz, jint w, jint h, jint bitDepth, jint binning,
		jint numRect, jintArray rois_x, jintArray rois_y, jintArray rois_w, jintArray rois_h);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_StartCameraMap
	(JNIEnv* env, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_ShutdownCameraMap
	(JNIEnv* env, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_Add16BitImageDataCameraMap
	(JNIEnv* env, jobject, jstring cameraSz, jdouble fps, jdouble interval, jint w, jint h, jshortArray pix, jboolean bSave);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_Add8BitImageDataCameraMap
	(JNIEnv* env, jobject, jstring cameraSz, jdouble fps, jdouble interval, jint w, jint h, jbyteArray pix, jboolean bSave);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_AddARGBBitImageDataCameraMap
	(JNIEnv* env, jobject, jstring cameraSz, jdouble fps, jdouble interval, jint w, jint h, jbyteArray pix, jboolean bSave);






	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetBufferDimensions(JNIEnv* env, jobject, jintArray bufSizes);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_UpdateDOChannel
	//(JNIEnv* env, jobject, jintArray pDOData, jint line);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_UpdateAOChannel
	//(JNIEnv* env, jobject, jdoubleArray pAOData, jint channel);
	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNextNumSamples(JNIEnv* env, jobject);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNumberOfDataPoints(JNIEnv* env, jobject);

	//JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunSampleTime(JNIEnv* env, jobject);

	//JNIEXPORT jlong JNICALL Java_uk_co_strimm_services_JDAQ_GetNumberOfStages(JNIEnv* env, jobject);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNumChannels(JNIEnv* env, jobject, jint type);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetChannelFromIndex(JNIEnv* env, jobject, jint type, jint ix);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetPort(JNIEnv* env, jobject, jboolean bIn);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetDeviceID(JNIEnv* env, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNextNumSamples(JNIEnv*, jobject);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNumberOfDataPoints(JNIEnv*, jobject);

	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunStartTime(JNIEnv*, jobject);

	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunEndTime(JNIEnv*, jobject);

	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentRunSampleTime(JNIEnv*, jobject);

	JNIEXPORT jlong JNICALL Java_uk_co_strimm_services_JDAQ_GetNumberOfStages(JNIEnv*, jobject);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetNumChannels(JNIEnv*, jobject, jint type);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetChannelFromIndex(JNIEnv*, jobject, jint type, jint ix);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetPort(JNIEnv*, jobject, jboolean bIn);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetDeviceID(JNIEnv*, jobject);

	//Useful Windows API functions

	JNIEXPORT jboolean JNICALL Java_uk_co_strimm_services_JDAQ_GetKeyState(JNIEnv*, jobject, int VK);

	JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_GetKeyboardState(JNIEnv*, jobject, jintArray virtual_keyboard);

	JNIEXPORT jdouble JNICALL Java_uk_co_strimm_services_JDAQ_GetCurrentSystemTime(JNIEnv*, jobject);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_WinInitSpeechEngine(JNIEnv* env, jobject);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_WinShutdownSpeechEngine(JNIEnv* env, jobject);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_WinSpeak(JNIEnv* env, jobject, jstring outSz1, jboolean bSychronous);

	//JNIEXPORT jint JNICALL Java_uk_co_strimm_services_JDAQ_WinBeep(JNIEnv* env, jobject, jint freq, jint dur);


#ifdef __cplusplus
}
#endif
#endif

